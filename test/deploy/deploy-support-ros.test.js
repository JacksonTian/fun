'use strict';

const sinon = require('sinon');
const sandbox = sinon.createSandbox();
const { deployByRos } = require('../../lib/deploy/deploy-support-ros');
const client = require('../../lib/client');
const { setProcess } = require('../test-utils');
const assert = sandbox.assert;
const uuid = require('uuid');
const inquirer = require('inquirer');

const changes = [
  {
    'ResourceChange': {
      'LogicalResourceId': 'RosDemo',
      'ResourceType': 'ALIYUN::FC::Service',
      'Action': 'Modify',
      'Details': [
        {
          'Target': {
            'Name': 'Description'
          }
        }
      ]
    }
  },
  {
    'ResourceChange': {
      'LogicalResourceId': 'RosDemoRosDemo',
      'ResourceType': 'ALIYUN::FC::Function',
      'Action': 'Modify',
      'Details': [
        {
          'Target': {
            'Name': 'Code'
          }
        },
        {
          'Target': {
            'Name': 'Timeout'
          }
        },
        {
          'Target': {
            'Name': 'Runtime'
          }
        }
      ]
    }
  }
];

const tpl = {};

const stackName = 'stackName';

const stackId = 'c2234cf3-40f1-440f-b634-51370180589a';

const listParams = {
  'RegionId': 'cn-beijing',
  'StackName.1': stackName,
  'PageSize': 50,
  'PageNumber': 1,
  'ShowNestedStack': false
};

const updateParams = {
  RegionId: 'cn-beijing',
  ChangeSetName: 'fun-random',
  StackId: stackId,
  ChangeSetType: 'UPDATE',
  Description: 'generated by Funcraft',
  TemplateBody: '{}',
  DisableRollback: false,
  TimeoutInMinutes: 10
};

const getStackParams = {
  'StackId': stackId,
  'RegionId': 'cn-beijing'
};


const getChangeSetParam = {
  'RegionId': 'cn-beijing',
  'ChangeSetId': 'changeSetId',
  'ShowTemplate': true
};

const execChangeSetParams = {
  RegionId: 'cn-beijing', 
  ChangeSetId: 'changeSetId'
};

describe('test deploy support ros', () => {

  let rosClient;

  const requestOption = {
    method: 'POST'
  };

  const answer = {
    'ok': true
  };

  let requestStub;
  let restoreProcess;

  beforeEach(() => {

    restoreProcess = setProcess({
      ACCOUNT_ID: 'testAccountId',
      ACCESS_KEY_ID: 'testKeyId',
      ACCESS_KEY_SECRET: 'testKeySecret',
      FC_ENDPOINT: 'test fc endpoint',
      REGION: 'cn-beijing'
    });

    requestStub = sandbox.stub();

    sandbox.stub(inquirer, 'prompt').resolves(answer);

    rosClient = {
      request: requestStub
    };

    sandbox.stub(client, 'getRosClient').resolves(rosClient);
    sandbox.stub(uuid, 'v4').returns('random');
  });

  afterEach(() => {
    restoreProcess();
    sandbox.restore();
  });

  it('test deploy by ros with assumeYes is true', async () => {

    requestStub.withArgs('ListStacks', listParams, requestOption).resolves({
      'PageNumber': 1,
      'TotalCount': 3,
      'PageSize': 50,
      'Stacks': [
        {
          'StackId': stackId,
          'StackName': stackName
        }
      ]
    });

    requestStub.withArgs('CreateChangeSet', updateParams, requestOption).resolves({
      ChangeSetId: 'changeSetId'
    });

   

    requestStub.withArgs('GetStack', getStackParams).resolves({
      'Status': 'UPDATE_COMPLETE'
    });

    requestStub.withArgs('GetChangeSet', getChangeSetParam).resolves({
      'Status': 'COMPLETE',
      'Changes': changes
    });

    requestStub.withArgs('ExecuteChangeSet', execChangeSetParams, requestOption).resolves();

    await deployByRos(stackName, tpl, true);

    assert.calledWith(requestStub.firstCall, 'ListStacks', listParams, requestOption);
    assert.calledWith(requestStub.secondCall, 'CreateChangeSet', updateParams, requestOption);
    assert.calledWith(requestStub.thirdCall, 'GetChangeSet', getChangeSetParam, requestOption);
    assert.calledWith(requestStub.lastCall, 'GetStack', getStackParams, requestOption);

    assert.notCalled(inquirer.prompt);
  });

  it('test deploy by ros with assumeYes is false', async () => {

    requestStub.withArgs('ListStacks', listParams, requestOption).resolves({
      'PageNumber': 1,
      'TotalCount': 3,
      'PageSize': 50,
      'Stacks': [
        {
          'StackId': stackId,
          'StackName': stackName
        }
      ]
    });

    requestStub.withArgs('CreateChangeSet', updateParams, requestOption).resolves({
      ChangeSetId: 'changeSetId'
    });

    requestStub.withArgs('GetStack', getStackParams).resolves({
      'Status': 'UPDATE_COMPLETE'
    });

    requestStub.withArgs('GetChangeSet', getChangeSetParam).resolves({
      'Status': 'COMPLETE',
      'Changes': changes
    });

    requestStub.withArgs('ExecuteChangeSet', execChangeSetParams, requestOption).resolves();

    const promptArguments = [{
      message: 'Please confirm to continue.',
      name: 'ok',
      type: 'confirm'
    }];

    await deployByRos(stackName, tpl, false);

    assert.calledWith(requestStub.firstCall, 'ListStacks', listParams, requestOption);
    assert.calledWith(requestStub.secondCall, 'CreateChangeSet', updateParams, requestOption);
    assert.calledWith(requestStub.thirdCall, 'GetChangeSet', getChangeSetParam, requestOption);
    assert.calledWith(requestStub.lastCall, 'GetStack', getStackParams, requestOption);
    assert.calledWith(inquirer.prompt, promptArguments);
  });
});