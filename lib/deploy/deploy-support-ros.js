'use strict';

const { sleep } = require('../time');
const uuid = require('uuid');
const client = require('../client');
const { getProfile } = require('../profile');
const _ = require('lodash');
const { green, red } = require('colors');
const debug = require('debug');
const promiseRetry = require('../retry');

const Table = require('cli-table3');

const DEFAULT_ROS_TIMEOUT_IN_MINS = 10;
const requestOption = {
  method: 'POST'
};

const ROS_STATUS_COMPLETE_SUFFIX = 'COMPLETE';
const ROS_STATUS_FAILED_SUFFIX = 'FAILED';

async function findRosStack(rosClient, region, stackName) {
  const pageSize = 50;
  let requestPageNumber = 0;
  let totalCount;
  let pageNumber;

  let stack;

  do {
    const params = {
      'RegionId': region,
      'StackName.1': stackName,
      'PageSize': pageSize,
      'PageNumber': ++requestPageNumber,
      'ShowNestedStack': false
    };

    const rs = await rosClient.request('ListStacks', params, requestOption);

    totalCount = rs.TotalCount;
    pageNumber = rs.PageNumber;

    const stacks = rs.Stacks;

    stack = _.find(stacks, { StackName: stackName });
  } while (!stack && totalCount && pageNumber && pageNumber * pageSize < totalCount);

  return (stack || {}).StackId;
}

function generateChangeSetName() {
  return 'fun-' + uuid.v4();
}

async function updateChangeSet(rosClient, region, stackName, stackId, tpl) {
  try {
    const params = {
      'RegionId': region,
      'ChangeSetName': generateChangeSetName(),
      'StackId': stackId,
      'ChangeSetType': 'UPDATE',
      'Description': 'generated by Funcraft',
      'TemplateBody': JSON.stringify(tpl),
      'DisableRollback': false,
      'TimeoutInMinutes': DEFAULT_ROS_TIMEOUT_IN_MINS
    };
    debug('update stacks, params %s', params);

    const res = await rosClient.request('CreateChangeSet', params, requestOption);
    return res.ChangeSetId;
  } catch (e) {
    if (e.name === 'NotSupportedError' && e.data && e.data.Message && e.data.Message.indexOf('Update the completely same stack') !== -1) {
      throw new Error(red(`no need to update, your stack ${stackName} is already latest`)); // todo: 
    } else {
      throw e;
    }
  }
}

async function createChangeSet(rosClient, region, stackName, tpl) {
  const params = {
    'RegionId': region,
    'ChangeSetName': generateChangeSetName(),
    'StackName': stackName,
    'ChangeSetType': 'CREATE',
    'Description': 'generated by Funcraft',
    'TemplateBody': JSON.stringify(tpl),
    'DisableRollback': false,
    'TimeoutInMinutes': DEFAULT_ROS_TIMEOUT_IN_MINS
  };

  debug('create stacks, params %s', params);

  const res = await rosClient.request('CreateChangeSet', params, requestOption);

  return {
    'changeSetId': res.ChangeSetId,
    'stackId': res.StackId
  };
}

async function execChangeSet(rosClient, region, changeSetId) {
  const params = {
    'RegionId': region,
    'ChangeSetId': changeSetId
  };

  await rosClient.request('ExecuteChangeSet', params, requestOption);
}

async function waitComplete(rosClient, stackId, region) {

  let status;
  
  do {

    const params = {
      'StackId': stackId,
      'RegionId': region
    };

    await sleep(1000);
  
    const res = await rosClient.request('GetStack', params, requestOption);

    // https://help.aliyun.com/document_detail/132088.html?spm=a2c4g.11186623.6.812.24c031b26lZ7iD
    if ((res.Status.indexOf(ROS_STATUS_COMPLETE_SUFFIX) !== -1) || (res.Status.indexOf(ROS_STATUS_FAILED_SUFFIX) !== -1)) {

      status = res.Status;
    } else {

      console.log(`waiting for status to be complete, now status is ${res.Status}.`);
    }
  } while (!status);

  if (status.indexOf(ROS_STATUS_FAILED_SUFFIX) !== -1) { throw new Error(`ROS deployment failed, the reason is: ${status.StatusReason}`); }
}

async function getChangeSet(rosClient, changeSetId, region) {

  const params = {
    'RegionId': region,
    'ChangeSetId': changeSetId,
    'ShowTemplate': true
  };

  const res = await rosClient.request('GetChangeSet', params, requestOption);

  return res.Changes;
}

const tableHead = ['ResourceType', 'Action', 'Propertity'];


// ┌──────────────────────┬────────┬────────────┐
// │ ResourceType         │ Action │ Propertity │
// ├──────────────────────┼────────┼────────────┤
// │                      │        │ Code       │
// │                      │        ├────────────┤
// │ ALIYUN::FC::Function │ Modify │ Timeout    │
// │                      │        ├────────────┤
// │                      │        │ Runtime    │
// └──────────────────────┴────────┴────────────┘
async function localDiffDisplay(changes) {

  if (_.isEmpty(changes)) { return; }

  const table = new Table({
    head: tableHead,
    style: {
      head: ['green'],
      border: [] //disable colors for the border
    }});

  const map = new Map();

  _.forEach(changes, change => {
    // key: [ResourceType, Action] 
    // value: [Name1, Name2.....]
    const key = [change.ResourceChange.ResourceType, change.ResourceChange.Action];
    const value = change.ResourceChange.Details.map(detail => detail.Target.Name);
    map.set(key, value);
  });

  for (let [key, value] of map.entries()) {

    const valueSize = value.length;

    let first = true;

    for (const pro of value) {
      if (first) {
        table.push([{rowSpan: valueSize, content: key[0], vAlign: 'center'}, {rowSpan: valueSize, content: key[1], vAlign: 'center'}, pro]);
        first = false;
      } else {
        table.push([pro]);
      }
    }
  }
  console.log(`\nchangeset difference table:\n`);
  console.log(table.toString());
  console.log();
}

async function deployByRos(stackName, tpl) {
  const profile = await getProfile();
  const region = profile.defaultRegion;

  const rosClient = await client.getRosClient();

  let stackId = await findRosStack(rosClient, region, stackName);

  let changeSetId;

  if (!stackId) { // create

    const changeSet = await createChangeSet(rosClient, region, stackName, tpl);
    
    changeSetId = changeSet.changeSetId;
    stackId = changeSet.stackId;

  } else { // update
    changeSetId = await updateChangeSet(rosClient, region, stackName, stackId, tpl);
  }

  const changes = await getChangeSet(rosClient, changeSetId, region);

  await localDiffDisplay(changes);

  await promiseRetry(async (retry, times) => {
    try {
      await execChangeSet(rosClient, region, changeSetId);
    } catch (e) {
      if (e.code === 'NotSupported' && e.data && e.data.Message
        && e.data.Message.indexOf('StatusEnum.CREATE_IN_PROGRESS is not supported')) {
        await sleep(1000);
        console.log('changeSet is in \'StatusEnum.CREATE_IN_PROGRESS\' status, try to exectue again');
        retry(e);
      } else {
        throw e;
      }
    }
  });

  await waitComplete(rosClient, stackId, region);

  showRosDeployNextTips(region);
}

function showRosDeployNextTips(region) {

  const url = `https://ros.console.aliyun.com/#/stack/${region}`;

  console.log(green(`\nDeploy success, you can login to ${url} to see deploy logs.\n`));
}

module.exports = {
  deployByRos
};