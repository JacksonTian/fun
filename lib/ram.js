'use strict';

const Ram = require('@alicloud/ram');
const getProfile = require('./profile').getProfile;

const getRamClient = async () => {
  const profile = await getProfile();
  
  return new Ram({
    accessKeyId: profile.accessKeyId,
    accessKeySecret: profile.accessKeySecret,
    endpoint: 'https://ram.aliyuncs.com'
  });
};


async function deletePolicyNotDefaultVersion(ram, policyName) {
  const listResponse = await ram.listPolicyVersions({
    PolicyType: 'Custom',
    PolicyName: policyName
  });
    
  const versions = (listResponse.PolicyVersions || {}).PolicyVersion;
  if (versions) {
    for (let version of versions) {
      if (version.IsDefaultVersion === false) {
        await ram.deletePolicyVersion({
          PolicyName: policyName,
          VersionId: version.VersionId
        });
      }
    }
  }
}

async function makePolicy(policyName, policyDocument) {
  const ram = await getRamClient();
  
  let exists = true;
  
  try {
    await ram.getPolicy({
      PolicyType: 'Custom',
      PolicyName: policyName
    });
  } catch (ex) {
    if (ex.code !== 'EntityNotExist.Policy') {
      throw ex;
    } else {exists = false;}
  }
    
  if (!exists) {
    await ram.createPolicy({
      PolicyName: policyName,
      Description: 'generated by fc fun',
      PolicyDocument: JSON.stringify(policyDocument)
    });
  } else {
    // avoid limitExceeded.Policy.Version
    await deletePolicyNotDefaultVersion(ram, policyName);
  
    await ram.createPolicyVersion({
      PolicyName: policyName,
      PolicyDocument:  JSON.stringify(policyDocument), 
      SetAsDefault: true
    });
  }
}

async function attachPolicyToRole(policyName, roleName, policyType = 'System') { 
  const ram = await getRamClient();
    
  const policies = await ram.listPoliciesForRole({
    RoleName: roleName
  });
  
  var policy = policies.Policies.Policy.find((item) => {
    return item.PolicyName === policyName;
  });
  
  if (!policy) {
    await ram.attachPolicyToRole({
      PolicyType: policyType,
      PolicyName: policyName,
      RoleName: roleName
    });
  }
}

async function getRamRole(ramClient, roleName) {
  try {
    return await ramClient.getRole({
      RoleName: roleName
    }, { timeout: 10000 });
  } catch (ex) {
    if (ex.name !== 'EntityNotExist.RoleError') {
      throw ex;
    }
  }
}  

async function makeRole(roleName, createRoleIfNotExist, description='FunctionComput Default Role', assumeRolePolicy) {
  
  const ram = await getRamClient();
  
  var role = await getRamRole(ram, roleName);
  
  if (!assumeRolePolicy) {
    assumeRolePolicy = {
      'Statement': [
        {
          'Action': 'sts:AssumeRole',
          'Effect': 'Allow',
          'Principal': {
            'Service': [
              'fc.aliyuncs.com'
            ]
          }
        }
      ],
      'Version': '1'
    };
  }
  
  if (!role && createRoleIfNotExist) {
    role = await ram.createRole({
      RoleName: roleName,
      Description: description,
      AssumeRolePolicyDocument: JSON.stringify(assumeRolePolicy)
    });
  } else if (!role) {
    console.error(`role ${roleName} not exist`);
    process.exit(-1);
  }
  
  return role;
}

async function makeAndAttachPolicy(policyName, policyDocument, roleName) {
  await makePolicy(policyName, policyDocument);
  await attachPolicyToRole(policyName, roleName, 'Custom');
}

module.exports = {
  makeRole, makePolicy, attachPolicyToRole, makeAndAttachPolicy
};